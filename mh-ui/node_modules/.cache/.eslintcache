[{"C:\\Jawa\\MH\\mh-ui\\src\\index.js":"1","C:\\Jawa\\MH\\mh-ui\\src\\App.js":"2","C:\\Jawa\\MH\\mh-ui\\src\\Utilities\\Variables.js":"3","C:\\Jawa\\MH\\mh-ui\\src\\components\\CreateReport.js":"4","C:\\Jawa\\MH\\mh-ui\\src\\components\\UpdateReport.js":"5","C:\\Jawa\\MH\\mh-ui\\src\\components\\DeleteReport.js":"6"},{"size":226,"mtime":1674446140275,"results":"7","hashOfConfig":"8"},{"size":6395,"mtime":1674464241553,"results":"9","hashOfConfig":"8"},{"size":1591,"mtime":1674452987161,"results":"10","hashOfConfig":"8"},{"size":5282,"mtime":1674459170940,"results":"11","hashOfConfig":"8"},{"size":5464,"mtime":1674464272570,"results":"12","hashOfConfig":"8"},{"size":5207,"mtime":1674464385750,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1mxo5i3",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Jawa\\MH\\mh-ui\\src\\index.js",[],[],"C:\\Jawa\\MH\\mh-ui\\src\\App.js",["34","35"],[],"import React, { useState } from \"react\";\nimport Variables from \"./Utilities/Variables\";\nimport CreateReport from \"./components/CreateReport\";\nimport UpdateReport from \"./components/UpdateReport\";\nimport DeleteReport from \"./components/DeleteReport\";\nexport default function App() {\n  // declaring states for new report, update report and button visibility status -byJawa\n  const [reports, setReports] = useState([]);\n  const [showNewReportForm, setShowNewReportForm] = useState(false);\n  const [reportCurrentlyBeingUpdated, setReportCurrentlyBeingUpdated] =\n    useState(null);\n  const [reportCurrentlyBeingDeleted, setReportCurrentlyBeingDeleted] =\n    useState(null);\n\n  // fetching reports -byJawa\n  function getAllReports() {\n    const url = Variables.API_URL_GET_ALL_REPORTS;\n    fetch(url, {\n      method: \"GET\",\n    })\n      .then((response) => response.json())\n      .then((reportsFromServer) => {\n        //console.log(reportsFromServer);\n        setReports(reportsFromServer);\n      })\n      .catch((error) => {\n        console.log(error);\n        alert(error);\n      });\n  }\n  return (\n    <div className=\"container\">\n      <div className=\"row min-vh-100\">\n        <div className=\"col d-flex flex-column justify-content-center align-items-center\">\n          {showNewReportForm === false &&\n            reportCurrentlyBeingUpdated === null &&\n            reportCurrentlyBeingDeleted === null && (\n              <div>\n                <h1>Scout Reporting</h1>\n                <div className=\"mt-5\">\n                  <button\n                    onClick={getAllReports}\n                    className=\"btn btn-danger w-100 btn-lg\"\n                  >\n                    Reports\n                  </button>\n                  <button\n                    onClick={() => setShowNewReportForm(true)}\n                    className=\"btn btn-dark w-100 btn-lg mt-4\"\n                  >\n                    New Report\n                  </button>\n                </div>\n              </div>\n            )}\n          {/* check reports object from server and button visibility before rendering table -byJawa */}\n          {reports.length > 0 &&\n            showNewReportForm === false &&\n            reportCurrentlyBeingUpdated === null &&\n            reportCurrentlyBeingDeleted === null &&\n            renderReportTable()}\n          {/* check button visibility and open CreateReport component -byJawa */}\n          {showNewReportForm && (\n            <CreateReport OnReportCreated={OnReportCreated} />\n          )}\n          {/* */}\n          {reportCurrentlyBeingUpdated !== null && (\n            <UpdateReport\n              report={reportCurrentlyBeingUpdated}\n              OnReportUpdated={OnReportUpdated}\n            />\n          )}\n          {reportCurrentlyBeingDeleted !== null && (\n            <DeleteReport\n              report={reportCurrentlyBeingDeleted}\n              OnReportDeleted={OnReportDeleted}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n  // rendering table for reports\n  function renderReportTable() {\n    return (\n      <div className=\"table-responsive mt-5\">\n        <table className=\"table table-bordered border-dark\">\n          <thead>\n            <tr>\n              <th scope=\"col\">ReportId</th>\n              <th scope=\"col\">Player Key</th>\n              <th scope=\"col\">First Name</th>\n              <th scope=\"col\">Last Name</th>\n              <th scope=\"col\">Comment</th>\n              <th scope=\"col\">Shooting Rating</th>\n              <th scope=\"col\">Assist Rating</th>\n              <th scope=\"col\">Rebound Rating</th>\n              <th scope=\"col\">Defense Rating</th>\n              <th scope=\"col\">Highlight</th>\n              <th scope=\"col\">Update/Delete</th>\n            </tr>\n          </thead>\n          <tbody>\n            {reports.map((report) => (\n              <tr key={report.ReportId}>\n                <th scope=\"row\">{report.ReportId}</th>\n                <td>{report.PlayerKey}</td>\n                <td>{report.FirstName}</td>\n                <td>{report.LastName}</td>\n                <td>{report.Comments}</td>\n                <td>{report.ShootingRating}</td>\n                <td>{report.AssistRating}</td>\n                <td>{report.ReboundRating}</td>\n                <td>{report.DefenseRating}</td>\n                <td>{report.HighlightLink}</td>\n                <td>\n                  <button\n                    onClick={() => setReportCurrentlyBeingUpdated(report)}\n                    className=\"btn btn-outline-dark btn-sm\"\n                  >\n                    Update\n                  </button>\n                  <button\n                    onClick={() => setReportCurrentlyBeingDeleted(report)}\n                    className=\"btn btn-outline-danger btn-sm\"\n                  >\n                    Delete\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n  // after submitting new report, change button visibility status using state -byJawa\n  function OnReportCreated(createdReport) {\n    setShowNewReportForm(false);\n    if (createdReport === null) {\n      return;\n    }\n    alert(\"New report submitted successfully.\");\n\n    // call function to refresh the table\n    getAllReports();\n  }\n\n  function OnReportUpdated(updatedReport) {\n    setReportCurrentlyBeingUpdated(null);\n    if (updatedReport === null) {\n      return;\n    }\n\n    let reportsCopy = [...reports];\n    const index = reportsCopy.findIndex((reportsCopyRepost, currentIndex) => {\n      if (reportsCopyRepost.ReportId === updatedReport.ReportId) {\n        return true;\n      }\n    });\n    if (index !== -1) {\n      reportsCopy[index] = updatedReport;\n    }\n    setReports(reportsCopy);\n    alert(`Report #${updatedReport.ReportId} successfully updated.`);\n    getAllReports();\n  }\n\n  \n  function OnReportDeleted(deletedReport) {\n    setReportCurrentlyBeingDeleted(null);\n    if (deletedReport === null) {\n      return;\n    }\n\n    let reportsCopy = [...reports];\n    const index = reportsCopy.findIndex((reportsCopyRepost, currentIndex) => {\n      if (reportsCopyRepost.ReportId === deletedReport.ReportId) {\n        return true;\n      }\n    });\n    if (index !== -1) {\n      reportsCopy[index] = deletedReport;\n    }\n    setReports(reportsCopy);\n    alert(`Report #${deletedReport.ReportId} successfully deleted.`);\n    getAllReports();\n  }\n}\n",[],"C:\\Jawa\\MH\\mh-ui\\src\\Utilities\\Variables.js",[],[],"C:\\Jawa\\MH\\mh-ui\\src\\components\\CreateReport.js",[],[],"C:\\Jawa\\MH\\mh-ui\\src\\components\\UpdateReport.js",[],[],"C:\\Jawa\\MH\\mh-ui\\src\\components\\DeleteReport.js",[],[],{"ruleId":"36","severity":1,"message":"37","line":156,"column":75,"nodeType":"38","messageId":"39","endLine":156,"endColumn":77},{"ruleId":"36","severity":1,"message":"37","line":177,"column":75,"nodeType":"38","messageId":"39","endLine":177,"endColumn":77},"array-callback-return","Array.prototype.findIndex() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd"]